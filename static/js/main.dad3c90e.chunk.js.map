{"version":3,"sources":["features/todos/todosSlice.js","features/todos/Form.js","features/Todo.js","features/TodoList.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["todosSlice","createSlice","name","initialState","todos","filters","reducers","addTodos","state","action","push","payload","changeStatus","id","existingPost","find","post","console","log","completed","deleteItem","filter","saveLocalStorageIntoState","map","item","filterTodos","value","todo","actions","Form","dispatch","useDispatch","useState","inputText","setInputText","onChange","e","target","type","className","onClick","preventDefault","text","Math","random","Todo","fall","setFall","posts","useSelector","event","prev","setTimeout","el","TodoList","renderedPosts","key","App","useEffect","getTodosFromLocalStorage","saveTodosToLocalStorage","localStorage","setItem","JSON","stringify","getItem","blah","parse","configureStore","reducer","todosReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dad3c90e.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nlet initialState={\r\n  todos: [],\r\n  filters:[]\r\n};\r\n \r\nexport const todosSlice = createSlice({\r\n  name: 'todos',\r\n  initialState,\r\n    \r\n  reducers: {\r\n\r\n    addTodos(state, action){\r\n      state.todos.push(action.payload)\r\n    },\r\n  \r\n    changeStatus(state, action){\r\n      const{id}=action.payload\r\n      // const existingPost = state[id] -\r\n      const existingPost = state.todos.find(post=> post.id===id)\r\n      console.log(existingPost.completed)\r\n      if(existingPost){\r\n        existingPost.completed = !existingPost.completed\r\n      }\r\n    },\r\n\r\n    deleteItem(state, action){\r\n      const{id} = action.payload;\r\n      state.todos= state.todos.filter(post=> post.id !==id);\r\n    },\r\n\r\n    saveLocalStorageIntoState(state,action){\r\n      const blah = action.payload.map(item=>state.todos.push(item))\r\n    },\r\n\r\n    filterTodos(state, action){\r\n      switch(action.payload.value){\r\n        case 'completed':\r\n          state.filters = state.todos.filter(todo=>todo.completed===true)\r\n          break;\r\n        case 'uncompleted':\r\n          state.filters = state.todos.filter(todo=>todo.completed===false)\r\n          break;\r\n        default:\r\n          state.filters = state.todos;\r\n          break;\r\n        }\r\n    }\r\n}})\r\n\r\nexport const { addTodos, changeStatus, deleteItem, saveLocalStorageIntoState,filterTodos} = todosSlice.actions;\r\nexport default todosSlice.reducer;\r\n\r\n\r\n// this delete method is returning a proxy object only when initialState is an object(that can not be mapped through) why?:\r\n// https://stackoverflow.com/questions/70391063/when-i-filter-the-cart-the-reducer-function-return-proxy-only-in-redux-toolkit/72762758#72762758,\r\n// Error: [Immer] An immer producer returned \r\n// a new value *and* modified its draft. Either return a new value *or* modify the draft. - maybe this\r\n// is an answer that below im trying to return a draft by going: return existingPost\r\n    // deleteItem(state, action){\r\n    //   const{id} = action.payload;\r\n    //   const existingPost = state.todos.filter(post=> post.id !==id)\r\n    //   console.log('DELETE iTEM', existingPost)\r\n    //   if(existingPost){\r\n    //     return existingPost}\r\n    //   },\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  addTodos,\r\n  filterTodos\r\n} from './todosSlice';\r\n// import styles from './Counter.module.css';\r\n\r\nexport function Form() {\r\n  // const count = useSelector();\r\n  const dispatch = useDispatch();\r\n  const [inputText, setInputText] = useState();\r\n\r\n \r\n\r\nconst inputTextHandler=(e) =>{\r\n  setInputText(e.target.value);\r\n  }\r\n\r\nconst submitTodoHandler = (e) =>{\r\n  e.preventDefault();\r\n  dispatch(addTodos({text:inputText, completed:false, id: Math.random() *1000}));\r\n    setInputText(\"\");\r\n};\r\n\r\nconst filterTodosHandler = e => dispatch(filterTodos({value:e.target.value}));\r\n\r\n  return (\r\n    <form>\r\n      <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n      <button  onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n      <div className=\"select\">\r\n        <select onChange={filterTodosHandler}name=\"todos\" className=\"filter-todo\">\r\n          <option value=\"all\">All</option>\r\n          <option value=\"completed\">Completed</option>\r\n          <option value=\"uncompleted\">Uncompleted</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","import React, {useState} from 'react';\r\nimport { useSelector, useDispatch} from 'react-redux'\r\nimport { changeStatus, deleteItem}  from './todos/todosSlice';\r\n\r\nconst Todo = ({text,id,completed}) => {\r\n  const[fall,setFall]=useState(false);  \r\n\r\nconst posts = useSelector(state => state.todos.todos)\r\nconst dispatch = useDispatch()\r\n    \r\nconst deleteHandler = (event) =>{\r\n    setFall(prev=>!prev)\r\n    setTimeout(()=>{\r\n        posts.map(el=> {\r\n            if(el.id === id){\r\n            dispatch(deleteItem({id}))\r\n        }}); \r\n    }, 1000)\r\n    \r\n}\r\n    \r\nconst completeHandler = () =>  {\r\n    posts.map(item =>{\r\n        if(item.id===id){\r\n            // console.log(item.completed)\r\n            dispatch(changeStatus({id}))\r\n        }})\r\n    }\r\n\r\n       \r\n        \r\nreturn (\r\n    <div className={fall?\"todo fall\": \"todo\"} >\r\n        <li className={`todo-item ${completed ? \"completed\" : \"\"}`} id={id}>{text}</li>\r\n        <button onClick={completeHandler} className=\"complete-btn\"><i className=\"fas fa-check\"></i></button>\r\n        <button  onClick={deleteHandler} className=\"trash-btn\"><i className=\"fas fa-trash\"></i></button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\n// Import Components\r\nimport Todo from './Todo'\r\n\r\n\r\nconst TodoList = () => {\r\n\r\nconst posts = useSelector(state => state.todos.filters)\r\n\r\nconst renderedPosts = posts.map(post => (\r\n  <Todo text={post.text} key={post.id}\r\n  completed={post.completed} id={post.id} />\r\n))\r\n    \r\nreturn (\r\n  <div className=\"todo-container\">\r\n    <ul className=\"todo-list\"> {renderedPosts} </ul>\r\n  </div>\r\n); \r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport { Form } from './features/todos/Form';\r\nimport TodoList  from './features/TodoList';\r\nimport './App.css';\r\n \r\nimport { useSelector, useDispatch} from 'react-redux';\r\nimport {useEffect} from 'react';\r\nimport {saveLocalStorageIntoState, filterTodos} from './features/todos/todosSlice'\r\n\r\nfunction App() {\r\n\r\nconst dispatch = useDispatch()\r\nconst posts = useSelector(state => state.todos.todos)\r\n\r\n// first render getTodosFromlocalstorage\r\n// sets as state.todos.todos with local storage todos, \r\n// and dispatch(filterToodos) sets those todos to todos.todos.filters\r\nuseEffect(()=>{\r\n  getTodosFromLocalStorage();\r\n  dispatch(filterTodos('other'))\r\n}, []);\r\n\r\n// then any time state.todos.todos is changed since it is \r\n//  a depenency here (not state,todos.filters) the dispatch(filterTodos)\r\n// sets todos from state.todos.todos init state.todos.filters and that\r\n// allows us to use state.todos.filters for loading todos into TodoList\r\nuseEffect(()=>{\r\n  saveTodosToLocalStorage();\r\n  dispatch(filterTodos('other'))\r\n  },[posts]\r\n);\r\n\r\n// what is local storage can only be saved as string that why stringify\r\nconst saveTodosToLocalStorage = () => {\r\n  localStorage.setItem(\"posts\", JSON.stringify(posts));\r\n}; \r\n\r\nconst getTodosFromLocalStorage = ()=>{\r\n    if(localStorage.getItem(\"posts\")===null){\r\n      localStorage.setItem(\"posts\", JSON.stringify([]));\r\n    }else{\r\n      let blah = JSON.parse(localStorage.getItem(\"posts\"));\r\n      dispatch(saveLocalStorageIntoState(blah))\r\n    }\r\n  };\r\n \r\nconsole.log(posts);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>To-Do List (Redux)\r\n        </h1>\r\n      </header>\r\n      <Form   />\r\n      <TodoList  />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport todosReducer from '../features/todos/todosSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    todos: todosReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}