{"version":3,"sources":["features/counter/counterSlice.js","features/counter/Form.js","features/Todo.js","features/TodoList.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["counterSlice","createSlice","name","initialState","reducers","addTodos","state","action","push","payload","changeStatus","id","existingPost","find","post","console","log","completed","deleteItem","filter","saveLocalStorageIntoState","map","item","actions","Form","dispatch","useDispatch","useState","inputText","setInputText","value","onChange","e","target","type","className","onClick","preventDefault","text","Math","random","Todo","posts","useSelector","counter","el","TodoList","renderedPosts","App","useEffect","getTodosFromLocalStorage","saveTodosToLocalStorage","localStorage","setItem","JSON","stringify","getItem","blah","parse","configureStore","reducer","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e06f7739.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nlet initialState = []\r\n \r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n    \r\n\r\n  reducers: {\r\n    addTodos(state, action){\r\n  \r\n        state.push(action.payload)\r\n\r\n  },\r\n  changeStatus(state, action){\r\n    const{id}=action.payload\r\n// const existingPost = state[id] - to jest jakis skrot, \r\n// w ogole nie szuka tego posta\r\n    const existingPost = state.find(post=> post.id===id)\r\n    console.log(existingPost.completed)\r\n    if(existingPost){\r\n    existingPost.completed = !existingPost.completed\r\n    }\r\n\r\n  },\r\n  deleteItem(state,action){\r\nconst{id}=action.payload\r\n// console.log(id)\r\nconst existingPost = state.filter(post=> post.id !==id)\r\n// console.log(existingPost)\r\nif(existingPost){\r\nreturn existingPost}\r\n  },\r\n  saveLocalStorageIntoState(state,action){\r\nconst blah = action.payload.map(item=>state.push(item))\r\n  }\r\n}})\r\n\r\nexport const { addTodos,changeStatus,deleteItem, saveLocalStorageIntoState } = counterSlice.actions;\r\n\r\n\r\n// export const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  addTodos\r\n} from './counterSlice';\r\n// import styles from './Counter.module.css';\r\n\r\nexport function Form() {\r\n  // const count = useSelector();\r\n  const dispatch = useDispatch();\r\n  const [inputText, setInputText] = useState();\r\n\r\n  const inputTextHandler=(e) =>{\r\n    setInputText(e.target.value);\r\n}\r\nconst submitTodoHandler = (e) =>{\r\n    e.preventDefault();\r\n    dispatch(addTodos(\r\n      // ...todos means that if there are any todos - pass them along,\r\n// as wthat after coma we spacify what's next\r\n        \r\n        {text:inputText, completed:false, id: Math.random() *1000}\r\n    ));\r\n    setInputText(\"\");\r\n};\r\n// const statusHandler = (e) => {\r\n//   setStatus(e.target.value)\r\n// }\r\n\r\n  return (\r\n    <form>\r\n      <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n      <button  onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n      <div className=\"select\">\r\n        <select  name=\"todos\" className=\"filter-todo\">\r\n          <option value=\"all\">All</option>\r\n          <option value=\"completed\">Completed</option>\r\n          <option value=\"uncompleted\">Uncompleted</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { changeStatus, deleteItem}  from './counter/counterSlice';\r\n\r\nconst Todo = ({text,id,completed}) => {\r\n\r\n    const posts = useSelector(state => state.counter)\r\n    const dispatch = useDispatch()\r\n    \r\n// Events\r\nconst deleteHandler = () =>{\r\n//     // its filtring the state out of element that matches the id, and gets rid of that element\r\n//     // console.log(todo)\r\n    posts.map(el=> {\r\n        if(el.id === id){\r\n        dispatch(deleteItem({id}))\r\n    }\r\n    })}\r\n    const completeHandler = () =>  {\r\n        posts.map(item =>{\r\n            if(item.id===id){\r\n                // console.log(item.completed)\r\n                dispatch(changeStatus({id}))\r\n            }})}\r\n//  when this added to trash button: onClick={adClas}, they \r\n// fall as the shoul but not removed from the state\r\n    // const adClas = (e) =>{\r\n    //     console.log(\"bla\")\r\n    //     const item = e.target;\r\n    //     const todo = item.Element;\r\n    //     todo.classList.add(\"fall\");\r\n    // }        \r\n        \r\n        \r\n        \r\n  return (\r\n     <div className=\"todo\" >\r\n         <li className={`todo-item ${completed ? \"completed\" : \"\"}`} id={id}>{text}</li>\r\n         <button onClick={completeHandler} className=\"complete-btn\"><i className=\"fas fa-check\"></i></button>\r\n         <button  onClick={deleteHandler} className=\"trash-btn\"><i className=\"fas fa-trash\"></i></button>\r\n     </div>\r\n  );\r\n};\r\n\r\nexport default Todo;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\n// Import Components\r\nimport Todo from './Todo'\r\n\r\n\r\nconst TodoList = () => {\r\n    const posts = useSelector(state => state.counter)\r\n\r\n    const renderedPosts = posts.map(post => (\r\n       <Todo text={post.text}\r\n     completed={post.completed} id={post.id} />\r\n    \r\n      \r\n    ))\r\n    \r\n  return (\r\n    <div className=\"todo-container\">\r\n     <ul className=\"todo-list\"> {renderedPosts} </ul>\r\n    </div>\r\n  ); \r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport { Form } from './features/counter/Form';\r\nimport TodoList  from './features/TodoList';\r\nimport './App.css';\r\n \r\nimport { useSelector, useDispatch} from 'react-redux';\r\nimport {useEffect} from 'react';\r\nimport {saveLocalStorageIntoState} from './features/counter/counterSlice'\r\nfunction App() {\r\n  \r\n\r\n  const dispatch = useDispatch()\r\n  const posts = useSelector(state => state.counter)\r\n\r\n  useEffect(()=>{\r\n    getTodosFromLocalStorage();\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n    saveTodosToLocalStorage();\r\n    },[posts]\r\n  );\r\n\r\n  \r\n// // what is local storage can only be saved as string that why stringify\r\n  const saveTodosToLocalStorage = () => {\r\n    localStorage.setItem(\"posts\", JSON.stringify(posts));\r\n  }; \r\n\r\n\r\n  const getTodosFromLocalStorage = ()=>{\r\n    if(localStorage.getItem(\"posts\")===null){\r\nlocalStorage.setItem(\"posts\", JSON.stringify([]));}\r\nelse{\r\n     let blah = JSON.parse(localStorage.getItem(\"posts\"));\r\n      dispatch(saveLocalStorageIntoState(blah))\r\n    }\r\n  };\r\n \r\n  console.log(posts);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n  <h1>Todo List</h1>\r\n      </header>\r\n      <Form   />\r\n      <TodoList  />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    counter: counterReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}